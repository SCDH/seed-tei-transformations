<?xml version="1.0" encoding="UTF-8"?>
<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec"
    xmlns:map="http://www.w3.org/2005/xpath-functions/map"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ht="http://www.w3.org/1999/xhtml"
    xmlns:tei="http://www.tei-c.org/ns/1.0" xmlns:app="http://scdh.wwu.de/transform/app#"
    xmlns:t="http://www.tei-c.org/ns/1.0" stylesheet="libapp2c-testwrapper.xsl" run-as="external">

    <x:variable name="x:saxon-config" href="../../saxon.he.xml"/>

    <x:variable name="tei-text">
        <TEI xmlns="http://www.tei-c.org/ns/1.0" xml:lang="de">
            <teiHeader>
                <fileDesc>
                    <titleStmt>
                        <title>Test</title>
                    </titleStmt>
                </fileDesc>
                <encodingDesc>
                    <variantEncoding method="parallel-segmentation" location="internal"/>
                </encodingDesc>
            </teiHeader>
            <text xml:id="the-text">
                <front>
                    <div>
                        <head>Vorrede</head>
                        <p>Der hochwohlgebohrenen Prinzessin Z.</p>
                    </div>
                </front>
                <body>
                    <div xml:id="d1" n="1">
                        <head>Erstes Hauptstück</head>
                        <div xml:id="d1.1">
                            <head>Des ersten Hauptstücks erster Teil</head>
                            <p n="1" xml:id="d1.1.p1">Synthetische Urteile a priori beweisen
                                objektive Realität im Satz über die Summe der Innenwinkel des <app
                                    xml:id="d1.1.a1"><lem>Dreiecks</lem><rdg wit="#N"
                                    >n-Ecks</rdg></app>.</p>
                            <p n="2" xml:id="d1.1.p2">Vorausgesetzt werden die Sätze über
                                Wechselwinkel und Gegenwinkel an <sic>Paralellen</sic>, die durch
                                eine dritte Gerade geschnitten werden.<note>Genaus.</note></p>
                        </div>
                    </div>
                    <div xml:id="d2" n="2">
                        <lg>
                            <l>
                                <w n="1">Beim</w>
                                <w n="2">Styx</w><pc>!</pc>
                                <w n="3">Drüber</w>
                            </l>
                        </lg>
                    </div>
                </body>
            </text>
        </TEI>
    </x:variable>

    <x:variable name="app1" select="map {'entry-id': 'd1.1.a1',
        'entry': $tei-text//t:app[1],
        'type': 1, 
        'number': 1, 
        'line-number': 5,
        'lemma-text-nodes': $tei-text//t:app[1]/t:lem/text(),
        'lemma-grouping-ids': '$tei-text//t:app[1]/t:lem/text() ! generate-id(.)' }"/>

    <x:variable name="sic1" select="map {'entry-id': generate-id($tei-text//t:sic[1]),
                     'entry': $tei-text//t:sic[1],
                     'type': 1,
                     'number': 2,
                     'line-number': 7,
                     'lemma-text-nodes': $tei-text//t:sic[1]/text(),
                     'lemma-grouping-ids': $tei-text//t:sic[1]/text() ! generate-id(.) }"/>

    <x:variable name="apparatus-entries" select="$sic1, $app1"/>

    <x:variable name="apparatus-entry-map" select="map{
        map:get($sic1, 'entry-id'): map {'entry': map:get($sic1, 'entry-id'), 'entries': $sic1, 'number': 2, 'after': true()},
        map:get($app1, 'entry-id'): map {'entry': map:get($app1, 'entry-id'), 'entries': $app1, 'number': 1, 'after': true()}
        }"/>

    <x:scenario label="apparatus entries"
        pending="this is tested somewhere else. Test does not compile because of XSpec's handling of the context item. Fails due to encodingDesc/variantEncoding! But this is needed for other tests.">
        <x:context select="$tei-text"/>
        <x:call function="app:apparatus-entries">
            <x:param name="app-context" select="$x:context"/>
        </x:call>
        <x:expect label="count of entries" test="count(.)" select="1"/>
        <x:expect label="entry 1: element name" test="(.)[1] => map:get('entry') => name()"
            select="'sic'"/>
        <x:expect label="entry 1: entry" test="(.)[1] => map:get('entry')"
            select="$x:context//t:sic[1]"/>
        <x:expect label="entry 1: lemma-text-nodes" test="(.)[1] => map:get('lemma-text-nodes')"
            >Paralellen</x:expect>
    </x:scenario>

    <x:scenario label="apparatus footnotes">
        <x:context select="$tei-text"/>
        <x:call template="app:note-based-apparatus">
            <x:param name="entries" select="$apparatus-entry-map"/>
        </x:call>
        <x:expect label="not used in latex"/>
    </x:scenario>

    <x:scenario label="apparatus footnote marks on sic">
        <x:context select="$tei-text//t:sic[1]"/>
        <x:variable name="app:apparatus-entries" select="$apparatus-entry-map"/>
        <x:call template="app:footnote-marks">
            <x:param name="entries" select="$apparatus-entry-map"/>
        </x:call>
        <x:expect label="result"
            test="normalize-space() => matches('% \\edtext\{\\edlabel\{.*\}\}\{% \\xxref\{.*\}\{.*\}\\lemma\{Paralellen\}\\Afootnote\{\\apptranslate\{sic\}\}\} %')"
        />
    </x:scenario>

    <x:scenario label="apparatus footnote marks on app">
        <x:context select="$tei-text//t:app[1]"/>
        <x:variable name="app:apparatus-entries" select="$apparatus-entry-map"/>
        <x:call template="app:footnote-marks">
            <x:param name="entries" select="$apparatus-entry-map"/>
        </x:call>
        <x:expect label="result"
            >%&#xa;\edtext{\edlabel{d1.1.a1-end}}{%&#xa;\xxref{d1.1.a1-start}{d1.1.a1-end}\lemma{Dreiecks}\Afootnote{{n-Ecks\appsep{rdg-siglum-sep}\wit{N}}}}&#x20;%&#xa;</x:expect>
    </x:scenario>

    <x:scenario label="line-based apparatus">
        <x:context select="$tei-text"/>
        <x:call template="app:line-based-apparatus">
            <x:param name="entries" select="$apparatus-entries"/>
        </x:call>
        <x:expect label="not used in latex"/>
    </x:scenario>


    <x:scenario label="apparatus entries with custom xpath">
        <x:context select="$tei-text"/>
        <x:call function="app:apparatus-entries">
            <x:param name="app-context" select="$x:context"/>
            <x:param name="app-entries-xpath" select="'descendant-or-self::note[ancestor::text]'"/>
            <x:param name="type" select="2"/>
        </x:call>
        <x:expect label="count of entries" test="count(.)" select="1"/>
        <x:expect label="entry 1: element name" test="(.)[1] => map:get('entry') => name()"
            select="'note'"/>
        <x:expect label="entry 1: entry" test="(.)[1] => map:get('entry')"
            select="$x:context//t:note[1]"/>
        <x:expect label="entry 1: lemma-text-nodes" test="(.)[1] => map:get('lemma-text-nodes')"
            select="$tei-text//t:p[@xml:id eq 'd1.1.p2']/text()|$tei-text//t:p[@xml:id eq 'd1.1.p2']/t:sic/text()"
        />
    </x:scenario>

</x:description>
