<?xml version="1.0" encoding="UTF-8"?>

<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec"
    xmlns:map="http://www.w3.org/2005/xpath-functions/map"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ht="http://www.w3.org/1999/xhtml"
    xmlns:tei="http://www.tei-c.org/ns/1.0" xmlns:app="http://scdh.wwu.de/transform/app#"
    xmlns:test="http://scdh.wwu.de/transform/test#" xmlns:t="http://www.tei-c.org/ns/1.0"
    stylesheet="diwan.xsl" run-as="external">

    <x:variable name="x:saxon-config" href="../../../../saxon.he.xml"/>

    <x:variable name="doc">
        <t:TEI xml:lang="ar">
            <t:teiHeader>
                <t:fileDesc>
                    <t:sourceDesc>
                        <t:witness xml:id="w"/>
                    </t:sourceDesc>
                </t:fileDesc>
                <t:encodingDesc>
                    <t:variantEncoding method="double-end-point" location="internal"/>
                    <t:listPrefixDef>
                        <t:prefixDef ident="bibl" matchPattern="(.+)" replacementPattern="#$1"
                            relativeFrom="definition"/>
                        <t:prefixDef ident="tag" matchPattern="(.+)" replacementPattern="#$1"
                            relativeFrom="definition"/>
                    </t:listPrefixDef>
                </t:encodingDesc>
            </t:teiHeader>
            <t:text>
                <t:body>
                    <t:lg>
                        <t:l xml:id="i9.1">
                            <t:anchor xml:id="i9.1.a"/>a <t:app from="#i9.1.a" xml:id="i9.1.app">
                                <t:rdg wit="#w"><t:gap reason="illegible"/></t:rdg>
                            </t:app> b</t:l>
                        <t:l xml:id="i9.2">
                            <t:anchor xml:id="i9.2.a"/>a <t:app from="#i9.2.a" xml:id="i9.2.app">
                                <t:rdg wit="#w">c<t:gap reason="illegible"/></t:rdg>
                            </t:app> b</t:l>
                        <t:l xml:id="ifrw56.1">
                            <t:anchor xml:id="ifrw56.1.a"/>a <t:app from="#ifrw56.1.a"
                                xml:id="ifrw56.1.app">
                                <t:rdg wit="#w"><t:unclear reason="illegible">c</t:unclear></t:rdg>
                            </t:app> b</t:l>
                        <t:l xml:id="ifrw49.1">
                            <t:anchor xml:id="ifrw49.1.a"/>a <t:app from="#ifrw49.1.a"
                                xml:id="ifrw49.1.app">
                                <t:rdg wit="#w"><t:space/></t:rdg>
                            </t:app> b</t:l>
                        <t:l xml:id="ifrw49.2">a <t:space/> b</t:l>
                        <t:l xml:id="ifrw57.1">
                            <t:anchor xml:id="ifrw57.1.a"/>a <t:app from="#ifrw57.1.a"
                                xml:id="ifrw57.1.app">
                                <t:rdg wit="#w"><t:unclear>c</t:unclear></t:rdg>
                            </t:app> b</t:l>
                        <t:l xml:id="i22.1">a b <t:anchor xml:id="i22.1.a"/>c<t:span from="#i22.1.a">
                                <t:note xml:id="i22.1.n">foo</t:note>/t:note></t:span> d e </t:l>
                        <t:l xml:id="ifrw67.1">Und <t:anchor xml:id="ifrw67.1.a"/>was gibt's sonst
                                noch!?<t:span from="#ifrw67.1.a" ana="tag:Tadmin"><t:note
                                    xml:id="ifrw67.1.n"><t:bibl>Wer: wo,
                                            <t:biblScope>09</t:biblScope></t:bibl></t:note></t:span></t:l>
                        <t:l xml:id="ifrw67.2">Und <t:anchor xml:id="ifrw67.2.a"/>was gibt's jetzt
                                noch!?<t:span from="#ifrw67.2.a" ana="tag:Isarah"><t:note
                                    xml:id="ifrw67.2.n"><t:bibl>Wer: wo,
                                            <t:biblScope>09</t:biblScope></t:bibl></t:note></t:span></t:l>
                        <t:l xml:id="ifrw67.3">Und <t:anchor xml:id="ifrw67.3.a"/>was gibt's jetzt
                                noch!?<t:span from="#ifrw67.3.a" ana="tag:Tadmin"><t:note
                                    xml:id="ifrw67.3.n"><t:bibl>Wer: wo,
                                            <t:biblScope>09</t:biblScope></t:bibl>,
                                aber!</t:note></t:span></t:l>
                    </t:lg>
                </t:body>
                <t:back>
                    <t:listBibl>
                        <t:bibl xml:id="book1" xml:lang="en">
                            <t:author>John Locke</t:author>: <t:title>An Essay</t:title>.</t:bibl>
                        <bibl xml:id="Quran">Koran</bibl>
                    </t:listBibl>
                    <t:taxonomy>
                        <t:category xml:id="Tadmin">
                            <t:desc xml:lang="en"><t:term xml:lang="ar-Latn">Taḍmīn</t:term>:
                                incorporation of an existing line of poetry or part thereof</t:desc>
                            <!-- 2, 9, 9 -->
                        </t:category>
                        <t:category xml:id="Isarah">
                            <t:desc xml:lang="en"><t:term xml:lang="ar-Latn"
                                >Išārah</t:term></t:desc>
                            <!-- 0, 0 -->
                        </t:category>
                    </t:taxonomy>
                </t:back>
            </t:text>
        </t:TEI>
    </x:variable>

    <x:scenario label="#9: gap nested in rdg, without sibling text">
        <x:context select="$doc//*[@xml:id eq 'i9.1']"/>
        <x:call template="test:single-app-entry"/>
        <x:expect label="number of entries" test="count(//*[@class eq 'apparatus-line'])" select="1"/>
        <x:expect label="reason present in apparatus entry"
            test="some $txt in //*[@data-i18n-key]/text() satisfies $txt eq $doc//*[@xml:id eq 'i9.1']//@reason"/>
        <x:expect label="reason present in apparatus entry and it is translated"
            test="some $att in //@data-i18n-key satisfies $att eq $doc//*[@xml:id eq 'i9.1']//@reason"/>
        <x:expect label="result (reading only)" test="//*[@class eq 'reading']">
            <span class="reading">
                <span class="reading-annotation">
                    <span class="static-text" data-i18n-key="illegible">illegible</span>
                </span>
                <span class="..." style="..." data-i18n-key="rdg-siglum-sep">:</span><span
                    class="siglum">w</span></span>
        </x:expect>
    </x:scenario>

    <x:scenario label="#9: gap nested in rdg, with sibling text">
        <x:context select="$doc//*[@xml:id eq 'i9.2']"/>
        <x:call template="test:single-app-entry"/>
        <x:expect label="number of entries" test="count(//*[@class eq 'apparatus-line'])" select="1"/>
        <x:expect label="reason present in apparatus entry"
            test="some $txt in //*[@data-i18n-key]/text() satisfies $txt eq $doc//*[@xml:id eq 'i9.2']//@reason"/>
        <x:expect label="reason present in apparatus entry and it is translated"
            test="some $att in //@data-i18n-key satisfies $att eq $doc//*[@xml:id eq 'i9.2']//@reason"/>
        <x:expect label="result (reading only)" test="//*[@class eq 'reading']">
            <span class="reading">c[...]<span class="apparatus-sep"
                    data-i18n-key="rdg-annotation-sep">, </span>
                <span class="reading-annotation"><span class="static-text" data-i18n-key="illegible"
                        >illegible</span>
                </span><span class="..." style="..." data-i18n-key="rdg-siglum-sep">:</span><span
                    class="siglum">w</span></span>
        </x:expect>
    </x:scenario>

    <x:scenario
        label="#56 (framework): there should be no second apparatus entry for unclear nested in rdg">
        <x:context select="$doc//*[@xml:id eq 'ifrw56.1']"/>
        <x:call template="test:single-app-entry"/>
        <x:expect label="number of entries" test="count(//*[@class eq 'apparatus-line'])" select="1"/>
        <x:expect label="reason present in apparatus entry"
            test="some $txt in //*[@data-i18n-key]/text() satisfies $txt eq $doc//*[@xml:id eq 'ifrw56.1']//@reason"/>
        <x:expect label="reason present in apparatus entry and it is translated"
            test="some $att in //@data-i18n-key satisfies $att eq $doc//*[@xml:id eq 'ifrw56.1']//@reason"/>
        <x:expect label="result (reading only)" test="//*[@class eq 'reading']">
            <span class="reading">c<span class="apparatus-sep" data-i18n-key="rdg-annotation-sep">, </span>
                <span class="reading-annotation"><span class="static-text" data-i18n-key="illegible"
                        >illegible</span>
                </span><span class="..." style="..." data-i18n-key="rdg-siglum-sep">:</span><span
                    class="siglum">w</span></span>
        </x:expect>
    </x:scenario>

    <x:scenario label="#49 (framework): space nested in rdg">
        <x:context select="$doc//*[@xml:id eq 'ifrw49.1']"/>
        <x:call template="test:single-app-entry"/>
        <x:expect label="number of entries" test="count(//*[@class eq 'apparatus-line'])" select="1"/>
        <x:expect label="reading annotation 'space' present in apparatus entry"
            test="some $txt in //*[@data-i18n-key]/text() satisfies matches($txt, 'space')"/>
        <x:expect label="reading annotation is translated"
            test="some $att in //@data-i18n-key satisfies $att eq 'space'"/>
        <x:expect label="result (reading only)" test="//*[@class eq 'reading']">
            <span class="reading"><span class="reading-annotation"><span class="static-text"
                        data-i18n-key="space">...</span>
                </span><span class="..." style="..." data-i18n-key="rdg-siglum-sep">:</span><span
                    class="siglum">w</span></span>
        </x:expect>
    </x:scenario>

    <x:scenario label="#49 (framework): standalone space">
        <x:context select="$doc//*[@xml:id eq 'ifrw49.2']"/>
        <x:call template="test:single-app-entry"/>
        <x:expect label="number of entries" test="count(//*[@class eq 'apparatus-line'])" select="1"/>
        <x:expect label="static text 'space' present in apparatus entry"
            test="some $txt in //*[@data-i18n-key]/text() satisfies matches($txt, 'space')"/>
        <x:expect label="'space' is translated"
            test="some $att in //@data-i18n-key satisfies $att eq 'space'"/>
        <x:expect label="result (reading only)" test="//*[matches(@class, 'reading')]">
            <span class="reading space"><span class="static-text" data-i18n-key="space">...</span>
            </span>
        </x:expect>
        <x:expect label="sign in lemma" test="//*[@class eq 'apparatus-lemma']">
            <span class="apparatus-lemma">—</span>
        </x:expect>
    </x:scenario>

    <x:scenario
        label="#57 (framework): unclear nested in rdg should get a reading annotation even if no reason attribute present">
        <x:context select="$doc//*[@xml:id eq 'ifrw57.1']"/>
        <x:call template="test:single-app-entry"/>
        <x:expect label="number of entries" test="count(//*[@class eq 'apparatus-line'])" select="1"/>
        <x:expect label="static reason 'illegible' present in apparatus entry"
            test="some $txt in //*[@data-i18n-key]/text() satisfies $txt eq 'unclear'"/>
        <x:expect label="reason present in apparatus entry and it is translated"
            test="some $att in //@data-i18n-key satisfies $att eq 'unclear'"/>
        <x:expect label="result (reading only)" test="//*[@class eq 'reading']">
            <span class="reading">c<span class="apparatus-sep" data-i18n-key="rdg-annotation-sep">, </span>
                <span class="reading-annotation"><span class="static-text" data-i18n-key="unclear"
                        >unclear</span>
                </span><span class="..." style="..." data-i18n-key="rdg-siglum-sep">:</span><span
                    class="siglum">w</span></span>
        </x:expect>
    </x:scenario>

    <x:scenario label="#22: apparatus entries when nested in span">
        <x:context select="$doc//*[@xml:id eq 'i22.1.n']"/>
        <x:call template="test:single-editorial-note"/>
        <x:expect label="number of entries" test="count(//*[@class eq 'apparatus-line'])" select="1"/>
        <x:expect label="lemma" test="//*[@class eq 'apparatus-lemma'] => normalize-space()"
            select="'c'"/>
        <x:expect label="note" test="//*[@class eq 'note-text'] => matches('foo')"/>
    </x:scenario>

    <x:scenario label="#67 (framework): Diwan preview for Tadmin and Isarah: Tadmin">
        <x:context select="$doc//*[@xml:id eq 'ifrw67.1.n']"/>
        <x:call template="test:single-editorial-note"/>
        <x:expect label="number of entries" test="count(//*[@class eq 'apparatus-line'])" select="1"/>
        <x:expect label="lemma" test="//*[@class eq 'apparatus-lemma'] => normalize-space()"
            select="'was … noch!?'"/>
        <x:expect label="prefixed with Tadmin"
            test="//*[some $cls in tokenize(@class) satisfies $cls eq 'pre-reading-text'] => matches('Taḍmīn')"
        />
    </x:scenario>

    <x:scenario label="#67 (framework): Diwan preview for Tadmin and Isarah: Isarah">
        <x:context select="$doc//*[@xml:id eq 'ifrw67.2.n']"/>
        <x:call template="test:single-editorial-note"/>
        <x:expect label="number of entries" test="count(//*[@class eq 'apparatus-line'])" select="1"/>
        <x:expect label="lemma" test="//*[@class eq 'apparatus-lemma'] => normalize-space()"
            select="'was … noch!?'"/>
        <x:expect label="prefixed with Tadmin"
            test="//*[some $cls in tokenize(@class) satisfies $cls eq 'pre-reading-text'] => matches('Išārah')"
        />
    </x:scenario>

    <x:scenario
        label="#67 (framework): Diwan preview for Tadmin and Isarah: Tadmin, but text in note.">
        <x:context select="$doc//*[@xml:id eq 'ifrw67.3.n']"/>
        <x:call template="test:single-editorial-note"/>
        <x:expect label="number of entries" test="count(//*[@class eq 'apparatus-line'])" select="1"/>
        <x:expect label="lemma" test="//*[@class eq 'apparatus-lemma'] => normalize-space()"
            select="'was … noch!?'"/>
        <x:expect label="not prefixed with Tadmin"
            test="empty(//*[some $cls in tokenize(@class) satisfies $cls eq 'pre-reading-text'])"/>
    </x:scenario>

</x:description>
